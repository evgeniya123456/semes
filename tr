import tkinter as tk
import time

class SandClock(tk.Canvas):
    def __init__(self, master, duration=60, sand_color="#FFD700", glass_color="#F0F8FF", frame_color="#8B4513", **kwargs):
        super().__init__(master, width=150, height=300, highlightthickness=0, **kwargs)
        self.duration = duration
        self.sand_color = sand_color
        self.glass_color = glass_color
        self.frame_color = frame_color
        self.sand_level = 0.0
        self.is_running = False
        self.start_time = 0
        self.timer_id = None
        self.bind("<Configure>", self._on_resize)
        self._create_sand_clock()
        self._animate_sand() 

def _calculate_coordinates(self):
        square_size = 80
        canvas_width = self.winfo_width()
        canvas_height = self.winfo_height()
        center_x = canvas_width // 2
        top_y = (canvas_height - 2 * square_size) // 2
        return center_x, top_y, square_size

    def _create_sand_clock(self):
        self.delete("all")
        cx, top_y, sq = self._calculate_coordinates()
        half_sq = sq // 2

        # Рамка пісочного годинника
        frame_points = [
            cx - half_sq, top_y,
            cx + half_sq, top_y,
            cx + 10, top_y + sq,
            cx + half_sq, top_y + 2 * sq,
            cx - half_sq, top_y + 2 * sq,
            cx - 10, top_y + sq
        ]
        self.create_polygon(frame_points, outline=self.frame_color, fill=self.glass_color, width=2, tags="glass")
# Верхній пісок
        self.upper_sand = self.create_polygon(0, 0, 0, 0, 0, 0, 0, 0, fill=self.sand_color, outline="", tags="sand")

        # Нижній пісок
        self.lower_sand = self.create_polygon(0, 0, 0, 0, 0, 0, fill=self.sand_color, outline="", tags="sand")

        # Сипучий пісок (струмінь)
        self.falling_sand = self.create_rectangle(0, 0, 0, 0, fill=self.sand_color, outline="", tags="sand")

    def _animate_sand(self):
        if self.is_running:
            elapsed = time.time() - self.start_time
            if elapsed < self.duration:
                self.sand_level = 1 - (elapsed / self.duration)  # Відлік назад
                self._update_sand_display()
                self.timer_id = self.after(50, self._animate_sand)
            else:
                self.sand_level = 0.0
                self._update_sand_display()
                self.is_running = False
                print("Час вичерпано!")
                self.flip()

def _update_sand_display(self):
        cx, top_y, sq = self._calculate_coordinates()
        padding = 10
        max_height = sq - 2 * padding
        width_factor = sq // 2 - padding

        # Верхній пісок (звужується донизу)
        remaining = self.sand_level
        upper_height = int(remaining * max_height)
        top_base = int(width_factor * remaining)
        self.coords(self.upper_sand,
                    cx - top_base, top_y + padding,
                    cx + top_base, top_y + padding,
                    cx + 2, top_y + padding + upper_height,
                    cx - 2, top_y + padding + upper_height)

        # Нижній пісок (наростає як купка)
        lower_height = int((1 - self.sand_level) * max_height)
        base = int(width_factor * (1 - self.sand_level))
        bottom = top_y + 2 * sq - padding
        self.coords(self.lower_sand,
                    cx - base, bottom,
                    cx + base, bottom,
                    cx, bottom - lower_height)

        # Сипучий пісок (струмінь)
        if 0 < self.sand_level < 1.0:
            top_sand_y = top_y + padding + upper_height
            bottom_sand_y = bottom - lower_height
            self.coords(self.falling_sand,
                        cx - 1, top_sand_y,
                        cx + 1, bottom_sand_y)
            self.itemconfigure(self.falling_sand, state='normal')
        else:
            self.itemconfigure(self.falling_sand, state='hidden')

    def start(self):
        if not self.is_running:
            self.is_running = True
            self.start_time = time.time()
            self._animate_sand()

    def reset(self):
        self.is_running = False
        if self.timer_id is not None:
            self.after_cancel(self.timer_id)
            self.timer_id = None
        self.sand_level = 1.0
        self._update_sand_display()

    def set_duration(self, new_duration):
        try:
            self.duration = int(new_duration)
            if self.is_running:
                self.reset()
                self.start()
        except ValueError:
            print("Будь ласка, введіть ціле число для тривалості.")

    def _on_resize(self, event):
        self._create_sand_clock()
        self._update_sand_display()

    def flip(self):
        """Перевертає пісочний годинник і починає новий відлік"""
        self.reset()  # Скидаємо рівень піску
        time.sleep(1)  # Додаємо невеликий затримку перед перевертанням
        self.is_running = True
        self.start_time = time.time()  # Перезапускаємо відлік
        print("Перевернуто!")

def main():
    window = tk.Tk()
    window.title("Пісочний годинник")

    sand_clock = SandClock(window, duration=60)
    sand_clock.pack(pady=10, expand=True, fill=tk.BOTH)
    sand_clock.start()  # Автоматичний запуск таймера

    button_frame = tk.Frame(window)
    button_frame.pack()

    start_button = tk.Button(button_frame, text="Старт", command=sand_clock.start)
    start_button.pack(side=tk.LEFT, padx=5)

    reset_button = tk.Button(button_frame, text="Скинути", command=sand_clock.reset)
    reset_button.pack(side=tk.LEFT, padx=5)
